CMAKE_MINIMUM_REQUIRED(VERSION 2.4)
IF(COMMAND CMAKE_POLICY)
	CMAKE_POLICY(SET CMP0003 OLD)
ENDIF(COMMAND CMAKE_POLICY)

ADD_DEFINITIONS(-DJNI_SUPPORT)

FOREACH(SRC ${FLIP_SRC} ${FLIP_INC})
	SET(PLUGIN_SRC ${PLUGIN_SRC} "../${SRC}")
ENDFOREACH(SRC)

FIND_PACKAGE(JNI)
IF(JNI_FOUND)
	INCLUDE_DIRECTORIES(${JAVA_INCLUDE_PATH})
	INCLUDE_DIRECTORIES(${JAVA_INCLUDE_PATH2})
ELSE(JNI_FOUND)
	MESSAGE(SEND_ERROR "Unable to find Java include path!")
ENDIF(JNI_FOUND)

ADD_LIBRARY(flip-plugin SHARED ${PLUGIN_SRC})

# BEGIN Library linking

TARGET_LINK_LIBRARIES(flip-plugin librock)
INCLUDE_DIRECTORIES(../libs/librock)

TARGET_LINK_LIBRARIES(flip-plugin dlib)
INCLUDE_DIRECTORIES(../libs/dlib)

TARGET_LINK_LIBRARIES(flip-plugin polarssl)
INCLUDE_DIRECTORIES(../libs/polarssl/include)

# link dl - For SQLite3 - not for FreeBSD
IF(CMAKE_COMPILER_IS_GNUCC)
	IF(CMAKE_SYSTEM_NAME STREQUAL "FreeBSD")
	ELSE(CMAKE_SYSTEM_NAME STREQUAL "FreeBSD")
		TARGET_LINK_LIBRARIES(flip-plugin dl)
	ENDIF(CMAKE_SYSTEM_NAME STREQUAL "FreeBSD")
ENDIF(CMAKE_COMPILER_IS_GNUCC)

# add -lcompat only for FreeBSD
IF(CMAKE_SYSTEM_NAME STREQUAL "FreeBSD")
	IF(CMAKE_COMPILER_IS_GNUCXX)
		TARGET_LINK_LIBRARIES(flip-plugin compat)
	ENDIF(CMAKE_COMPILER_IS_GNUCXX)
ENDIF(CMAKE_SYSTEM_NAME STREQUAL "FreeBSD")

# link ws2_32 and iphlpapi for Windows
IF(WIN32)
	TARGET_LINK_LIBRARIES(flip-plugin ws2_32)
	TARGET_LINK_LIBRARIES(flip-plugin iphlpapi)
	ADD_DEFINITIONS(-D_WIN32_WINNT=0x0500)
	ADD_DEFINITIONS(-D_WINSOCKAPI_)
	ADD_DEFINITIONS(-DNOMINMAX)
ENDIF(WIN32)

# add -lxnet and -lsocket on solaris
IF(CMAKE_SYSTEM_NAME STREQUAL "SunOS")
	TARGET_LINK_LIBRARIES(flip-plugin xnet)
	TARGET_LINK_LIBRARIES(flip-plugin socket)
ENDIF(CMAKE_SYSTEM_NAME STREQUAL "SunOS")

IF(NOT USE_BUNDLED_SQLITE)
	FIND_LIBRARY(SQLITE3_LIBRARY NAMES sqlite3 sqlite3_s)
ENDIF(NOT USE_BUNDLED_SQLITE)

FIND_LIBRARY(PTHREADS_LIBRARY NAMES pthread pthreads pthreadvc2)
IF(NOT WIN32)
	IF(PTHREADS_LIBRARY)
		TARGET_LINK_LIBRARIES(flip-plugin ${PTHREADS_LIBRARY})
	ELSE(PTHREADS_LIBRARY)
		MESSAGE(FATAL_ERROR "Could not find system pthread library.  You must set the location manually.")
	ENDIF(PTHREADS_LIBRARY)
ENDIF(NOT WIN32)

IF(SQLITE3_LIBRARY)
	MESSAGE(STATUS "Linking against system SQLite3 library.")
	TARGET_LINK_LIBRARIES(flip-plugin ${SQLITE3_LIBRARY})
ELSE(SQLITE3_LIBRARY)
	IF(NOT USE_BUNDLED_SQLITE)
		MESSAGE(STATUS "Could not find system SQLite3 library.  Will compile from included source.")
	ENDIF(NOT USE_BUNDLED_SQLITE)
	TARGET_LINK_LIBRARIES(flip-plugin sqlite3)
	INCLUDE_DIRECTORIES(../libs/sqlite3)
ENDIF(SQLITE3_LIBRARY)

# END Library linking

SET(PLUGIN_NAME "FLIP-")

if(${CMAKE_SYSTEM_NAME} MATCHES "Windows")
	SET(PLUGIN_NAME "${PLUGIN_NAME}win-")
    if( CMAKE_SIZEOF_VOID_P EQUAL 8 )
    	SET(PLUGIN_NAME "${PLUGIN_NAME}amd64")
    else( CMAKE_SIZEOF_VOID_P EQUAL 8 )
    	SET(PLUGIN_NAME "${PLUGIN_NAME}i386")
    endif( CMAKE_SIZEOF_VOID_P EQUAL 8 )
endif (${CMAKE_SYSTEM_NAME} MATCHES "Windows")

IF(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
	SET(PLUGIN_NAME "${PLUGIN_NAME}linux-")
    if( CMAKE_SIZEOF_VOID_P EQUAL 8 )
    	SET(PLUGIN_NAME "${PLUGIN_NAME}amd64")
    else( CMAKE_SIZEOF_VOID_P EQUAL 8 )
    	SET(PLUGIN_NAME "${PLUGIN_NAME}i386")
    endif( CMAKE_SIZEOF_VOID_P EQUAL 8 )
ENDIF(${CMAKE_SYSTEM_NAME} MATCHES "Linux")

IF(${CMAKE_SYSTEM_NAME} MATCHES "FreeBSD")
	SET(PLUGIN_NAME "${PLUGIN_NAME}freebsd-")
	IF(CMAKE_SIZEOF_VOID_P EQUAL 8)
		SET(PLUGIN_NAME "${PLUGIN_NAME}amd64")
	ELSE(CMAKE_SIZEOF_VOID_P EQUAL 8)
		SET(PLUGIN_NAME "${PLUGIN_NAME}i386")
	ENDIF(CMAKE_SIZEOF_VOID_P EQUAL 8)
ENDIF(${CMAKE_SYSTEM_NAME} MATCHES "FreeBSD")

IF(${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
	SET(PLUGIN_NAME "${PLUGIN_NAME}osx-")
	#TODO - detect PPC?
	IF(CMAKE_SIZEOF_VOID_P EQUAL 8)
		SET(PLUGIN_NAME "${PLUGIN_NAME}amd64")
	ELSE(CMAKE_SIZEOF_VOID_P EQUAL 8)
		SET(PLUGIN_NAME "${PLUGIN_NAME}i386")
	ENDIF(CMAKE_SIZEOF_VOID_P EQUAL 8)
ENDIF(${CMAKE_SYSTEM_NAME} MATCHES "Darwin")

SET_PROPERTY(TARGET flip-plugin PROPERTY PREFIX "")
SET_PROPERTY(TARGET flip-plugin PROPERTY OUTPUT_NAME ${PLUGIN_NAME})
SET_PROPERTY(TARGET flip-plugin PROPERTY LIBRARY_OUTPUT_DIRECTORY "bin")
SET_PROPERTY(TARGET flip-plugin PROPERTY RUNTIME_OUTPUT_DIRECTORY "bin")

#IF("${CMAKE_SYSTEM_PROCESSOR}" STREQUAL "x86_64" AND CMAKE_COMPILER_IS_GNUCC)
#	SET(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -fPIC")
#	SET(CMAKE_CXX_FLAGS_RELWITHDEBINFO "${CMAKE_CXX_FLAGS_RELWITHDEBINFO} -fPIC")
#	SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -fPIC")
#	SET(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} -fPIC")
#	SET(CMAKE_C_FLAGS_RELWITHDEBINFO "${CMAKE_C_FLAGS_RELWITHDEBINFO} -fPIC")
#	SET(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} -fPIC")
#ENDIF("${CMAKE_SYSTEM_PROCESSOR}" STREQUAL "x86_64" AND CMAKE_COMPILER_IS_GNUCC)
